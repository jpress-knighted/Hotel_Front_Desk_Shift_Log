generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Hotel Shift Log models
enum UserRole {
  SUPER_ADMIN
  MANAGER
  EMPLOYEE
}

enum Priority {
  NONE
  LOW
  MEDIUM
  HIGH
}

model User {
  id                          String    @id @default(cuid())
  username                    String    @unique
  email                       String?   @unique
  password                    String
  name                        String
  role                        UserRole  @default(EMPLOYEE)
  emailVerified               DateTime?
  image                       String?
  isArchived                  Boolean   @default(false)
  receivesHighPriorityEmails  Boolean   @default(false)
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  shiftReports     ShiftReport[]
  comments         Comment[]
  dailyPosts       DailyPostTracker[]
  acknowledgements ReportAcknowledgement[]

  @@map("users")
}

model ShiftReport {
  id                  String    @id @default(cuid())
  authorId            String?
  authorName          String
  priority            Priority  @default(NONE)
  bodyText            String?   @db.Text
  notedRooms          Int[]     @default([])
  stayoverRooms       Int[]     @default([])
  arrivals            Int?      @default(0)
  departures          Int?      @default(0)
  occupancyPercentage Float?    @default(0)
  isHidden            Boolean   @default(false)
  isResolved          Boolean   @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  author           User?                     @relation(fields: [authorId], references: [id], onDelete: SetNull)
  attachments      Attachment[]
  comments         Comment[]
  acknowledgements ReportAcknowledgement[]

  @@map("shift_reports")
}

model Attachment {
  id             String   @id @default(cuid())
  shiftReportId  String
  filename       String
  originalName   String
  mimeType       String
  size           Int
  uploadPath     String
  createdAt      DateTime @default(now())

  shiftReport ShiftReport @relation(fields: [shiftReportId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

enum CommentType {
  PUBLIC
  MANAGER_NOTE
}

model Comment {
  id               String      @id @default(cuid())
  shiftReportId    String
  authorId         String?
  authorName       String
  content          String      @db.VarChar(200)
  commentType      CommentType @default(PUBLIC)
  isHidden         Boolean     @default(false)
  imageUrl         String?
  originalFileName String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  shiftReport ShiftReport    @relation(fields: [shiftReportId], references: [id], onDelete: Cascade)
  author      User?          @relation(fields: [authorId], references: [id], onDelete: SetNull)
  likes       CommentLike[]

  @@map("comments")
}

model CommentLike {
  id        String   @id @default(cuid())
  commentId String
  userId    String
  createdAt DateTime @default(now())

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@map("comment_likes")
}

model DailyPostTracker {
  id         String   @id @default(cuid())
  userId     String
  date       DateTime @db.Date
  postCount  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("daily_post_trackers")
}

model ReportAcknowledgement {
  id             String      @id @default(cuid())
  shiftReportId  String
  userId         String
  acknowledgedAt DateTime    @default(now())

  shiftReport ShiftReport @relation(fields: [shiftReportId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([shiftReportId, userId])
  @@map("report_acknowledgements")
}
